#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <time.h>
#include <sys/wait.h>

#define BR_ITER 5  // Number of iterations
#define N 5        // Numbers written to file

// Global flags for synchronization
volatile sig_atomic_t parent_ready = 0;
volatile sig_atomic_t child_ready = 0;

void prikaziNaStdout(int sigNum)
{
    FILE *f = fopen("prenos.dat", "r");
    if (f == NULL) {
        perror("File opening failed");
        exit(1);
    }

    int broj;
    while (fscanf(f, "%d", &broj) != EOF)
        printf("%d\n", broj);

    printf("\n");
    fclose(f);

    // Parent is ready for the next iteration
    parent_ready = 1;
}

void pisiUFajl(int sigNum)
{
    FILE *f = fopen("prenos.dat", "w");
    if (f == NULL) {
        perror("File opening failed");
        exit(1);
    }

    for (int i = 0; i < N; ++i)
        fprintf(f, "%d\n", rand() % 101);

    fclose(f);

    // Child is ready to proceed
    child_ready = 1;
}

int main(int argc, char **argv)
{
    srand(time(NULL));

    // Set up signal handlers
    signal(SIGUSR1, prikaziNaStdout);
    signal(SIGUSR2, pisiUFajl);

    int pid = fork();
    if (pid == -1) {
        perror("fork failed");
        exit(1);
    }

    if (pid != 0)
    {
        // Parent process
        for (int brIt = 0; brIt < BR_ITER; ++brIt)
        {
            // Wait for the child to be ready
            while (!child_ready);  // Busy wait
            child_ready = 0;       // Reset flag

            // Write data and signal the child
            kill(pid, SIGUSR1);

            // Wait for the parent to finish reading
            pause();
        }

        // Kill child after iterations are complete
        kill(pid, SIGKILL);
        wait(NULL);
    }
    else
    {
        // Child process
        while (1)
        {
            // Signal parent to write to file
            kill(getppid(), SIGUSR2);

            // Wait until parent completes its task
            while (!parent_ready);  // Busy wait
            parent_ready = 0;       // Reset flag
        }
    }

    return 0;
}
