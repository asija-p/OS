#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <time.h>
#include <sys/wait.h>

#define BR_ITER 5 // Use 4096 for the real program
#define N 5       // Use 1024 for the real program

volatile sig_atomic_t parent_ready = 0; // Flag for parent
volatile sig_atomic_t child_ready = 0;  // Flag for child

void prikaziNaStdout(int sigNum)
{
    FILE *f = fopen("prenos.dat", "r");
    int broj;

    printf("Child: Reading from file:\n");
    while (fscanf(f, "%d", &broj) != EOF)
        printf("%d ", broj);
    printf("\n\n");
    fclose(f);

    child_ready = 1; // Mark that the child is ready
}

void pisiUFajl(int sigNum)
{
    FILE *f = fopen("prenos.dat", "w");

    printf("Parent: Writing to file...\n");
    for (int i = 0; i < N; i++)
        fprintf(f, "%d\n", rand() % 101);

    fclose(f);

    parent_ready = 1; // Mark that the parent is ready
}

int main(int argc, char **argv)
{
    srand(time(NULL));

    signal(SIGUSR1, prikaziNaStdout);
    signal(SIGUSR2, pisiUFajl);

    int pid = fork();

    if (pid > 0)
    {
        // Parent process
        int brIt = 0;

        // Parent sends the first signal to the child to start the sequence
        printf("Parent: Starting process...\n");
        kill(pid, SIGUSR1);

        while (brIt < BR_ITER)
        {
            pause(); // Wait for child's signal (SIGUSR2)
            if (parent_ready)
            {
                parent_ready = 0;
                ++brIt;

                // Signal the child to continue
                kill(pid, SIGUSR1);
            }
        }

        printf("Parent: Completed all iterations. Terminating child.\n");
        kill(pid, SIGTERM); // Terminate the child process
        wait(NULL);         // Wait for child to exit
    }
    else if (pid == 0)
    {
        // Child process
        while (1)
        {
            pause(); // Wait for parent's signal (SIGUSR1)
            if (child_ready)
            {
                child_ready = 0;

                // Signal the parent to write to file
                kill(getppid(), SIGUSR2);
            }
        }
    }
    else
    {
        perror("Fork failed");
        exit(1);
    }

    return 0;
}
