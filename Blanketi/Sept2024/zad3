include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/msg.h>
#include <sys/ipc.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>

#define KEY 10101

#define LEN 100

struct mymsgbuf
{
    long tip;
    char linija[LEN];
    int kraj;
};

void konvertuj(int msqid, int tip)
{
    struct mymsgbuf buf;

    char konvertovano[LEN];

    while(1)
    {
        msgrcv(msqid, &buf, sizeof(buf)-sizeof(long), tip, 0);

        if(buf.kraj==1)
            break;
            
        int i =0;
        for(; i<strlen(buf.linija); i++)
            konvertovano[i]=tip==1? tolower(buf.linija[i]) : toupper(buf.linija[i]);

        konvertovano[i]='\0';

        FILE *f = fopen("sredjeno.txt", "a");

        if(f==0)
            exit(1);

        fprintf(f, "%s", konvertovano);
        fclose(f);
    }

}

int main()
{
    int msqid = msgget(KEY, 0666 | IPC_CREAT);

    struct mymsgbuf buf;

    int pid1=fork();

    if(pid1==0)
    {
        //dete1
        konvertuj(msqid,1);
        return 0;
    }

    int pid2=fork();

    if(pid2==0)
    {
        konvertuj(msqid,2);
        return 0;
    }

    //rodtielj

    FILE* f = fopen("poruka.txt", "r");

    if(f==0)
    {
        printf("Problem sa fajlom");
        exit(1);
    }

    char linija[LEN];
    int red=1;

    while(fgets(linija, LEN, f))
    {
        if(red==0)
        {
            buf.tip=2; //parno
        }
        if(red==1)
        {
            buf.tip=1; //neparano
        }

        strcpy(buf.linija,linija);

        msgsnd(msqid, &buf, sizeof(buf)-sizeof(long), 0);
        
        red=(red+1)%2;
    }

    fclose(f);

    buf.kraj=1;
    buf.tip=1;
    msgsnd(msqid, &buf, sizeof(buf)-sizeof(long), 0);
    buf.tip=2;
    msgsnd(msqid, &buf, sizeof(buf)-sizeof(long), 0);

    wait(NULL);
    wait(NULL);

    msgctl(msqid, IPC_RMID, NULL);

    return 0;
}
