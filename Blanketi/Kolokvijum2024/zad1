#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <string.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/msg.h>
#include <sys/ipc.h>
#include <unistd.h>

#define KEY 10101

#define LEN 100

struct mymsgbuf
{
    long tip;
    char linija[LEN];
    int kraj;
};

void upisi(int msqid, char* fajl, int tip)
{
    FILE* f = fopen(fajl, "w");
    
    if(f==0)
    {
        printf("problem sa fajlom.");
        exit(1);
    }

    struct mymsgbuf msg;

    while(1)
    {
        msgrcv(msqid, &msg, sizeof(msg)-sizeof(long), tip, 0);

        if(msg.kraj==-1)
            break;

        fprintf(f, "%s", msg.linija);
    }

    fclose(f);
}

int main(int argc, char* argv[])
{
    if(argc!=2)
    {
        printf("Neodgovarajuci broj arg");
        exit(1);
    }

    struct mymsgbuf buf;

    int msqid = msgget(KEY, 0666 | IPC_CREAT);

    int pid1= fork();

    if(pid1==0)
    {
        upisi(msqid, "prva.txt", 1);
        return 0;
    }

    int pid2=fork();

    if(pid2==0)
    {
        upisi(msqid, "druga.txt", 2);
        return 0;
    }

    FILE* f = fopen(argv[1], "r");

    if(f==0)
    {
        printf("problem sa fajlom.");
        exit(1);
    }

    char linija[LEN];

    while(fgets(linija, 100, f))
    {
        if(linija[0]=='Z' || linija[0]=='z')
        {
            buf.tip=1;

        }
        else
        {
            buf.tip=2;
        }
        strcpy(buf.linija, linija);
        msgsnd(msqid, &buf, sizeof(buf)-sizeof(long), 0);
    }

    buf.kraj=-1;
    buf.tip=1;
    msgsnd(msqid, &buf, sizeof(buf)-sizeof(long), 0);

    buf.tip=2;
    msgsnd(msqid, &buf, sizeof(buf)-sizeof(long), 0);

    fclose(f);

    wait(NULL);
    wait(NULL);

    msgctl(msqid, IPC_RMID, NULL);
}
