#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <string.h>

#define MAX_LEN 256

#define SEM_KEY 10101
#define SHARED_MEM_KEY 10104

union semun {
    int val;
};

void semV_wait(int semid, int semnum)
{
    struct sembuf sop = {semnum, -1, 0};
    semop(semid, &sop, 1);
}

void semV_post(int semid, int semnum)
{
    struct sembuf sop = {semnum, 1, 0};
    semop(semid, &sop, 1);
}

void stampaj(int semid, int semnum, int shmemid)
{
    // Mapiranje deljene memorije
    char *shmptr = (char *)shmat(shmemid, NULL, 0);

    while (1)
    {
        semV_wait(semid, 0);

        if((semctl(semid, 2, GETVAL))==1)
        {
            break;
        }

        printf("%s", shmptr); 

        semV_post(semid, 1);
    }


    // Izbacivanje deljene memorije iz adresnog prostora
    shmdt(shmptr);
}

// U realizcaji se podrazumeva da ulazni fajlovi imaju isti broj linija!
int main(int argc, char* argv[])
{
    if(argc!=2)
    {
        printf("Nedovoljan broj argumenta");
        exit(1);
    }
    // Kreiranje semafora
    int semId = semget((key_t)SEM_KEY, 3, 0666 | IPC_CREAT);

    // Inicijalizacija semafora
    union semun semopts;
    semopts.val = 0;
    semctl(semId, 0, SETVAL, semopts); // S1 kad moze da se stampa
    semctl(semId, 1, SETVAL, semopts); // S2 kad moze da se cita
    semctl(semId, 2, SETVAL, semopts); // S3 za kraj

    // Kreiranje deljene memorije
    int shmemid = shmget(SHARED_MEM_KEY, MAX_LEN * sizeof(char), IPC_CREAT | 0666);

    int pid1 = fork();
    if (pid1 == 0)
    {
        stampaj(semId, 0, shmemid);
        return 0;
    }

    // Roditelj
    // Mapiranje deljene memorije
    char *shmptr = (char *)shmat(shmemid, NULL, 0);

    FILE *f = fopen(argv[1], "r");

    while(fgets(shmptr, MAX_LEN, f))
    {
        semV_post(semId, 0);

        semV_wait(semId, 1);
    }

    semV_post(semId, 2);
    semV_post(semId, 0);

    fclose(f);

    // Izbacivanje deljene memorije iz adresnog prostora
    shmdt(shmptr);

    wait(NULL);
    wait(NULL);

    semctl(semId, 0, IPC_RMID, 0);
    semctl(semId, 1, IPC_RMID, 0);
    semctl(semId, 2, IPC_RMID, 0);
    shmctl(shmemid, 0, IPC_RMID);

    return 0;
}
